{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Nick Kaplan's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Nick Kaplan</li> <li>Reviewer: Shriyans Sapkal</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before embarking on this journey, ensure you have completed the following steps:</p> <ol> <li>Create a Github account</li> <li>Download Git</li> <li>Download Visual Studio Code</li> <li>Download Docker Desktop</li> </ol>"},{"location":"tutorials/rust-setup/#initializing-the-repositories","title":"Initializing the repositories","text":"<ol> <li> <p>Create the project directory and navigate into it:     <pre><code>mkdir &lt;Rust project name&gt;\ncd &lt;Rust project name&gt;\n</code></pre></p> </li> <li> <p>Initialize the local git repository:     <pre><code>git init\n</code></pre></p> </li> <li> <p>Create a README file and commit it:     <pre><code>echo \"# Rust Project\" &gt; README.md\ngit add .\ngit commit -m \"Added README\"\n</code></pre></p> </li> <li> <p>Create a new repository on GitHub and link it to your local repository:</p> <ul> <li>Go to your GitHub account, click New Repository, and give it the same name as your project.</li> <li>Copy the repository URL and link it to your local repository: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/&lt;project-name&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></li> </ul> </li> </ol>"},{"location":"tutorials/rust-setup/#creating-the-dev-container","title":"Creating the dev container","text":"<ol> <li> <p>Open project directory in VS Code and install the Dev Containers extension</p> </li> <li> <p>Create a <code>.devcontainer</code> folder containing the file <code>.devcontainer/devcontainer.json</code></p> </li> <li> <p>In this file, we will have a number of project configurations</p> <ul> <li>name: This specifies a clear, descriptive label for your development container.</li> <li>image: Defines the Docker image used to create the container. For this setup, we'll use the latest Rust environment image provided by Microsoft.</li> <li>customizations: Allows you to configure additional features in VS Code, such as pre-installing useful extensions. Adding extensions here ensures other developers on your project have them installed in their dev containers automatically.</li> <li>postCreateCommand: Specifies commands to run after the container is set up. In this case, we'll use it to install Rust dependencies.</li> </ul> <p>Your <code>devcontainer.json</code> file should look like this: <pre><code>{\n    \"name\": \"&lt;Rust Project Name&gt;\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"rust-lang.rust-analyzer\"]\n        }\n    },\n    \"postCreateCommand\": \"cargo new ./&lt;Rust Project Name&gt; --vcs none\"\n\n}\n</code></pre></p> </li> </ol> <p><code>cargo new</code> command</p> <p>Make sure to include the postCreateCommand as <code>cargo new</code> must be run on an empty directory. Since we have already created a README and Dev Container folder our directory would not be empty. Thus running this command allows us to initalize a Rust directory and keep our other files.</p> <p><code>--vcs none</code> flag</p> <p>This flag is used to create a version control system, however since we already implemented a git repository it is unnecessary, hence <code>none</code>.</p> <ol> <li>Reopen the folder in the container<ul> <li>Press Ctrl+Shift+P or Cmd+Shift+P, search for Dev Container: Reopen in Container and select it.</li> <li>Wait for the container to launch</li> </ul> </li> </ol>"},{"location":"tutorials/rust-setup/#creating-the-rust-project","title":"Creating the Rust Project","text":"<p>Once the dev container is set up, you\u2019re ready to create and build a Rust project.</p> <ol> <li> <p>Confirm that Rust is installed and up to date by running the following in a new VSCode terminal: <pre><code>rustc --version\n</code></pre></p> </li> <li> <p>Navigate into <code>./&lt;Rust Project Name&gt;/src/main.rs</code> and update it to look like: <pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre></p> </li> </ol> <p>Similar to languages such as Java or C, Rust uses a <code>main()</code> function as the entry point for your program.</p> <p>The exclamation mark on <code>println!</code> is used to signify that this is a macro call. Essentially, it is Rust code that will write more Rust code before compilation. It is similar to a function in reducing the amount of code needed to be written. However, it offers more versatility in its definition and implementation in exchange for complexity.</p> <ol> <li> <p>Open a new terminal in VSCode and run the following: <pre><code>cd ./&lt;Rust Project Name&gt;\ncargo build\n</code></pre></p> </li> <li> <p>Run the built file directly <pre><code>./target/debug/&lt;Rust Project Name&gt;\n</code></pre></p> </li> <li> <p>Alternatively, from your rust project folder, you can run the following in the terminal: <pre><code>cargo run\n</code></pre></p> </li> </ol> <p>Difference between <code>cargo build</code> and <code>cargo run</code></p> <p>Cargo build compiles and creates an executable file from your main file You can see this file in the <code>target/debug</code> directory. You can then run this file separately. Cargo run also compiles main and then immediately runs it without creating the executable file.</p> <ol> <li> <p>Steps regarding git and dev container initialization were taken from the COMP 423 site.\u00a0\u21a9</p> </li> </ol>"}]}